import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
import deprecated from '@wordpress/deprecated';
import { __, sprintf } from '@wordpress/i18n';
import { settings } from '@wordpress/icons';
import { useState, useMemo, forwardRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import Button from '../button';
import RangeControl from '../range-control';
import { Flex, FlexItem } from '../flex';
import { default as UnitControl, parseQuantityAndUnitFromRawValue, useCustomUnits } from '../unit-control';
import CustomSelectControl from '../custom-select-control';
import { VisuallyHidden } from '../visually-hidden';
import { ToggleGroupControl, ToggleGroupControlOption } from '../toggle-group-control';
import { getFontSizeOptions, getSelectedOption, isSimpleCssValue, CUSTOM_FONT_SIZE } from './utils';
import { HStack } from '../h-stack';
import { Container, HeaderHint, HeaderLabel, Controls, ResetButton } from './styles';
import { Spacer } from '../spacer';

const UnforwardedFontSizePicker = (props, ref) => {
  var _fontSizes$;

  const {
    /** Start opting into the new margin-free styles that will become the default in a future version. */
    __nextHasNoMarginBottom = false,
    fallbackFontSize,
    fontSizes = [],
    disableCustomFontSizes = false,
    onChange,
    size = 'default',
    value,
    withSlider = false,
    withReset = true
  } = props;

  if (!__nextHasNoMarginBottom) {
    deprecated('Bottom margin styles for wp.components.FontSizePicker', {
      since: '6.1',
      version: '6.4',
      hint: 'Set the `__nextHasNoMarginBottom` prop to true to start opting into the new styles, which will become the default in a future version.'
    });
  }

  const units = useCustomUnits({
    availableUnits: ['px', 'em', 'rem']
  });
  /**
   * The main font size UI displays a toggle group when the presets are less
   * than six and a select control when they are more.
   */

  const fontSizesContainComplexValues = fontSizes.some(_ref => {
    let {
      size: sizeArg
    } = _ref;
    return !isSimpleCssValue(sizeArg);
  });
  const shouldUseSelectControl = fontSizes.length > 5;
  const options = useMemo(() => getFontSizeOptions(shouldUseSelectControl, fontSizes, disableCustomFontSizes), [shouldUseSelectControl, fontSizes, disableCustomFontSizes]);
  const selectedOption = getSelectedOption(fontSizes, value);
  const isCustomValue = selectedOption.slug === CUSTOM_FONT_SIZE;
  const [showCustomValueControl, setShowCustomValueControl] = useState(!disableCustomFontSizes && isCustomValue);
  const headerHint = useMemo(() => {
    if (showCustomValueControl) {
      return `(${__('Custom')})`;
    } // If we have a custom value that is not available in the font sizes,
    // show it as a hint as long as it's a simple CSS value.


    if (isCustomValue) {
      return value !== undefined && isSimpleCssValue(value) && `(${value})`;
    }

    if (shouldUseSelectControl) {
      return (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.size) !== undefined && isSimpleCssValue(selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.size) && `(${selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.size})`;
    } // Calculate the `hint` for toggle group control.


    let hint = (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.name) || selectedOption.slug;

    if (!fontSizesContainComplexValues && typeof selectedOption.size === 'string') {
      const [, unit] = parseQuantityAndUnitFromRawValue(selectedOption.size, units);
      hint += `(${unit})`;
    }

    return hint;
  }, [showCustomValueControl, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.name, selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.size, value, isCustomValue, shouldUseSelectControl, fontSizesContainComplexValues]);

  if (!options) {
    return null;
  } // This is used for select control only. We need to add support
  // for ToggleGroupControl.


  const currentFontSizeSR = sprintf( // translators: %s: Currently selected font size.
  __('Currently selected font size: %s'), selectedOption.name); // If neither the value or first font size is a string, then FontSizePicker
  // operates in a legacy "unitless" mode where UnitControl can only be used
  // to select px values and onChange() is always called with number values.

  const hasUnits = typeof value === 'string' || typeof ((_fontSizes$ = fontSizes[0]) === null || _fontSizes$ === void 0 ? void 0 : _fontSizes$.size) === 'string';
  const [valueQuantity, valueUnit] = parseQuantityAndUnitFromRawValue(value, units);
  const isValueUnitRelative = !!valueUnit && ['em', 'rem'].includes(valueUnit);
  return createElement(Container, {
    ref: ref,
    className: "components-font-size-picker"
  }, createElement(VisuallyHidden, {
    as: "legend"
  }, __('Font size')), createElement(Spacer, null, createElement(HStack, {
    className: "components-font-size-picker__header"
  }, createElement(HeaderLabel, {
    "aria-label": `${__('Size')} ${headerHint || ''}`
  }, __('Size'), headerHint && createElement(HeaderHint, {
    className: "components-font-size-picker__header__hint"
  }, headerHint)), !disableCustomFontSizes && createElement(Button, {
    label: showCustomValueControl ? __('Use size preset') : __('Set custom size'),
    icon: settings,
    onClick: () => {
      setShowCustomValueControl(!showCustomValueControl);
    },
    isPressed: showCustomValueControl,
    isSmall: true
  }))), createElement(Controls, {
    className: "components-font-size-picker__controls",
    __nextHasNoMarginBottom: __nextHasNoMarginBottom
  }, !!fontSizes.length && shouldUseSelectControl && !showCustomValueControl && createElement(CustomSelectControl, {
    __nextUnconstrainedWidth: true,
    className: "components-font-size-picker__select",
    label: __('Font size'),
    hideLabelFromVision: true,
    describedBy: currentFontSizeSR,
    options: options,
    value: options.find(option => option.key === selectedOption.slug),
    onChange: _ref2 => {
      let {
        selectedItem
      } = _ref2;

      if (selectedItem.size === undefined) {
        onChange === null || onChange === void 0 ? void 0 : onChange(undefined);
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(hasUnits ? selectedItem.size : Number(selectedItem.size));
      }

      if (selectedItem.key === CUSTOM_FONT_SIZE) {
        setShowCustomValueControl(true);
      }
    },
    size: size
  }), !shouldUseSelectControl && !showCustomValueControl && createElement(ToggleGroupControl, {
    __nextHasNoMarginBottom: __nextHasNoMarginBottom,
    label: __('Font size'),
    hideLabelFromVision: true,
    value: value,
    onChange: newValue => {
      if (newValue === undefined) {
        onChange === null || onChange === void 0 ? void 0 : onChange(undefined);
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(hasUnits ? newValue : Number(newValue));
      }
    },
    isBlock: true,
    size: size
  }, options.map(option => createElement(ToggleGroupControlOption, {
    key: option.key,
    value: option.value,
    label: option.label,
    "aria-label": option.name,
    showTooltip: true
  }))), !disableCustomFontSizes && showCustomValueControl && createElement(Flex, {
    className: "components-font-size-picker__custom-size-control"
  }, createElement(FlexItem, {
    isBlock: true
  }, createElement(UnitControl, {
    label: __('Custom'),
    labelPosition: "top",
    hideLabelFromVision: true,
    value: value,
    onChange: newValue => {
      if (newValue === undefined) {
        onChange === null || onChange === void 0 ? void 0 : onChange(undefined);
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(hasUnits ? newValue : parseInt(newValue, 10));
      }
    },
    size: size,
    units: hasUnits ? units : [],
    min: 0
  })), withSlider && createElement(FlexItem, {
    isBlock: true
  }, createElement(Spacer, {
    marginX: 2,
    marginBottom: 0
  }, createElement(RangeControl, {
    __nextHasNoMarginBottom: __nextHasNoMarginBottom,
    className: "components-font-size-picker__custom-input",
    label: __('Custom Size'),
    hideLabelFromVision: true,
    value: valueQuantity,
    initialPosition: fallbackFontSize,
    withInputField: false,
    onChange: newValue => {
      if (newValue === undefined) {
        onChange === null || onChange === void 0 ? void 0 : onChange(undefined);
      } else if (hasUnits) {
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue + (valueUnit !== null && valueUnit !== void 0 ? valueUnit : 'px'));
      } else {
        onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
      }
    },
    min: 0,
    max: isValueUnitRelative ? 10 : 100,
    step: isValueUnitRelative ? 0.1 : 1
  }))), withReset && createElement(FlexItem, null, createElement(ResetButton, {
    disabled: value === undefined,
    onClick: () => {
      onChange === null || onChange === void 0 ? void 0 : onChange(undefined);
    },
    isSmall: true,
    variant: "secondary",
    size: size
  }, __('Reset'))))));
};

export const FontSizePicker = forwardRef(UnforwardedFontSizePicker);
export default FontSizePicker;
//# sourceMappingURL=index.js.map