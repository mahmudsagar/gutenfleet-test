"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CUSTOM_FONT_SIZE = void 0;
exports.getFontSizeOptions = getFontSizeOptions;
exports.getSelectedOption = getSelectedOption;
exports.getToggleGroupOptions = getToggleGroupOptions;
exports.isSimpleCssValue = isSimpleCssValue;

var _i18n = require("@wordpress/i18n");

/**
 * WordPress dependencies
 */
const DEFAULT_FONT_SIZE = 'default';
const DEFAULT_FONT_SIZE_OPTION = {
  slug: DEFAULT_FONT_SIZE,
  name: (0, _i18n.__)('Default')
};
const CUSTOM_FONT_SIZE = 'custom';
exports.CUSTOM_FONT_SIZE = CUSTOM_FONT_SIZE;
const CUSTOM_FONT_SIZE_OPTION = {
  slug: CUSTOM_FONT_SIZE,
  name: (0, _i18n.__)('Custom')
};
/**
 * In case we have at most five font sizes, show a `T-shirt size`
 * alias as a label of the font size. The label assumes that the font sizes
 * are ordered accordingly - from smallest to largest.
 */

const FONT_SIZES_ALIASES = [
/* translators: S stands for 'small' and is a size label. */
(0, _i18n.__)('S'),
/* translators: M stands for 'medium' and is a size label. */
(0, _i18n.__)('M'),
/* translators: L stands for 'large' and is a size label. */
(0, _i18n.__)('L'),
/* translators: XL stands for 'extra large' and is a size label. */
(0, _i18n.__)('XL'),
/* translators: XXL stands for 'extra extra large' and is a size label. */
(0, _i18n.__)('XXL')];
/**
 * Some themes use css vars for their font sizes, so until we
 * have the way of calculating them don't display them.
 *
 * @param  value The value that is checked.
 * @return Whether the value is a simple css value.
 */

function isSimpleCssValue(value) {
  const sizeRegex = /^[\d\.]+(px|em|rem|vw|vh|%)?$/i;
  return sizeRegex.test(String(value));
}
/**
 * Return font size options in the proper format depending
 * on the currently used control (select, toggle group).
 *
 * @param  useSelectControl       Whether to use a select control.
 * @param  optionsArray           Array of available font sizes objects.
 * @param  disableCustomFontSizes Flag that indicates if custom font sizes are disabled.
 * @return Array of font sizes in proper format for the used control.
 */


function getFontSizeOptions(useSelectControl, optionsArray, disableCustomFontSizes) {
  if (disableCustomFontSizes && !optionsArray.length) {
    return null;
  }

  return useSelectControl ? getSelectOptions(optionsArray, disableCustomFontSizes) : getToggleGroupOptions(optionsArray);
}

function getSelectOptions(optionsArray, disableCustomFontSizes) {
  const options = [DEFAULT_FONT_SIZE_OPTION, ...optionsArray, ...(disableCustomFontSizes ? [] : [CUSTOM_FONT_SIZE_OPTION])];
  return options.map(_ref => {
    let {
      slug,
      name,
      size
    } = _ref;
    return {
      key: slug,
      name: name || slug,
      size,
      __experimentalHint: size && isSimpleCssValue(size) && parseFloat(String(size))
    };
  });
}
/**
 * Build options for the toggle group options.
 *
 * @param  optionsArray An array of font size options.
 * @param  labelAliases An array of alternative labels.
 * @return Remapped optionsArray.
 */


function getToggleGroupOptions(optionsArray) {
  let labelAliases = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FONT_SIZES_ALIASES;
  return optionsArray.map((_ref2, index) => {
    let {
      slug,
      size,
      name
    } = _ref2;
    return {
      key: slug,
      value: size,
      label: labelAliases[index],
      name: name || labelAliases[index]
    };
  });
}

function getSelectedOption(fontSizes, value) {
  if (!value) {
    return DEFAULT_FONT_SIZE_OPTION;
  }

  return fontSizes.find(font => font.size === value) || CUSTOM_FONT_SIZE_OPTION;
}
//# sourceMappingURL=utils.js.map