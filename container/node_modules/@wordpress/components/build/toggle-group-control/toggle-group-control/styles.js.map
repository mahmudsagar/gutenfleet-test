{"version":3,"sources":["@wordpress/components/src/toggle-group-control/toggle-group-control/styles.ts"],"names":["ToggleGroupControl","isDeselectable","size","css","COLORS","ui","background","CONFIG","transitionDurationFastest","toggleGroupControlSize","enclosingBorder","border","controlBorderRadius","borderHover","borderFocus","controlBoxShadowFocus","heights","default","block","BackdropView","gray","transitionDurationFast","VisualLabelWrapper"],"mappings":";;;;;;;;;;;AAGA;;AAMA;;;;AAGO,MAAMA,kBAAkB,GAAG;AAAA,MAAE;AACnCC,IAAAA,cADmC;AAEnCC,IAAAA;AAFmC,GAAF;AAAA,0BAM3BC,UAN2B,iBAOlBC,cAAOC,EAAP,CAAUC,UAPQ,uHAaRC,cAAOC,yBAbC,cAc9B,yBAAc,YAAd,CAd8B,OAgB9BC,sBAAsB,CAAEP,IAAF,CAhBQ,OAiB9B,CAAED,cAAF,IAAoBS,eAjBU;AAAA,CAA3B;;;AAoBP,MAAMA,eAAe,oBAAGP,UAAH,mBACHC,cAAOC,EAAP,CAAUM,MADP,qBAEFJ,cAAOK,mBAFL,4BAKFR,cAAOC,EAAP,CAAUQ,WALR,oCASFT,cAAOC,EAAP,CAAUS,WATR,kBAUJP,cAAOQ,qBAVH,6lGAArB;;AAgBO,MAAMN,sBAAsB,GAClCP,IADqC,IAEjC;AACJ,QAAMc,OAAO,GAAG;AACfC,IAAAA,OAAO,EAAE,MADM;AAEf,wBAAoB;AAFL,GAAhB;AAKA,0BAAOd,UAAP,iBACgBa,OAAO,CAAEd,IAAF,CADvB;AAGA,CAXM;;;AAaA,MAAMgB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAX;;AAKA,MAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,kBACTf,cAAOgB,IAAP,CAAa,GAAb,CADS,qBAENb,cAAOK,mBAFD,wEAOCL,cAAOc,sBAPR,YAQrB,yBAAc,YAAd,CARqB,ugGAAlB;;AAYA,MAAMC,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAxB","sourcesContent":["/**\n * External dependencies\n */\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\n/**\n * Internal dependencies\n */\nimport { CONFIG, COLORS, reduceMotion } from '../../utils';\nimport type { ToggleGroupControlProps } from '../types';\n\nexport const ToggleGroupControl = ( {\n\tisDeselectable,\n\tsize,\n}: {\n\tisDeselectable?: boolean;\n\tsize: NonNullable< ToggleGroupControlProps[ 'size' ] >;\n} ) => css`\n\tbackground: ${ COLORS.ui.background };\n\tborder: 1px solid transparent;\n\tdisplay: inline-flex;\n\tmin-width: 0;\n\tpadding: 2px;\n\tposition: relative;\n\ttransition: transform ${ CONFIG.transitionDurationFastest } linear;\n\t${ reduceMotion( 'transition' ) }\n\n\t${ toggleGroupControlSize( size ) }\n\t${ ! isDeselectable && enclosingBorder }\n`;\n\nconst enclosingBorder = css`\n\tborder-color: ${ COLORS.ui.border };\n\tborder-radius: ${ CONFIG.controlBorderRadius };\n\n\t&:hover {\n\t\tborder-color: ${ COLORS.ui.borderHover };\n\t}\n\n\t&:focus-within {\n\t\tborder-color: ${ COLORS.ui.borderFocus };\n\t\tbox-shadow: ${ CONFIG.controlBoxShadowFocus };\n\t\toutline: none;\n\t\tz-index: 1;\n\t}\n`;\n\nexport const toggleGroupControlSize = (\n\tsize: NonNullable< ToggleGroupControlProps[ 'size' ] >\n) => {\n\tconst heights = {\n\t\tdefault: '36px',\n\t\t'__unstable-large': '40px',\n\t};\n\n\treturn css`\n\t\tmin-height: ${ heights[ size ] };\n\t`;\n};\n\nexport const block = css`\n\tdisplay: flex;\n\twidth: 100%;\n`;\n\nexport const BackdropView = styled.div`\n\tbackground: ${ COLORS.gray[ 900 ] };\n\tborder-radius: ${ CONFIG.controlBorderRadius };\n\tleft: 0;\n\tposition: absolute;\n\ttop: 2px;\n\tbottom: 2px;\n\ttransition: transform ${ CONFIG.transitionDurationFast } ease;\n\t${ reduceMotion( 'transition' ) }\n\tz-index: 1;\n`;\n\nexport const VisualLabelWrapper = styled.div`\n\t// Makes the inline label be the correct height, equivalent to setting line-height: 0\n\tdisplay: flex;\n`;\n"]}