{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["identity","x","mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","mapBlockParents","reduce","flattenBlocks","transform","stack","length","shift","getFlattenedBlocksWithoutAttributes","getFlattenedBlockAttributes","attributes","getMutateSafeObject","original","working","hasSameKeys","a","b","keys","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","buildBlockTree","state","flattenedBlocks","byClientId","map","subBlock","updateParentInnerBlocksInTree","tree","updatedClientIds","updateChildrenOfUpdatedClientIds","uncontrolledParents","Set","controlledParents","current","parents","controlledInnerBlocks","add","order","subClientId","withBlockTree","reducer","newState","subTree","newSubTree","replacedClientIds","concat","filter","parentsOfRemovedBlocks","removedClientIds","updatedBlockUids","fromRootClientId","toRootClientId","entries","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","nextState","isExplicitPersistentChange","nextIsPersistentChange","isPersistentChange","withIgnoredBlockChange","IGNORED_ACTION_TYPES","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","keepControlledInnerBlocks","withBlockReset","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","value","key","_key","withSaveReusableBlock","id","withResetControlledBlocks","tempState","combineReducers","changes","updates","every","next","accumulator","uniqueByBlock","blockOrder","subState","mappedBlocks","fromIndex","indexOf","includes","firstClientId","firstIndex","lastClientId","hasControlledInnerBlocks","isTyping","draggedBlocks","blockVisibility","selectionHelper","updateSelection","blockToSelect","indexToSelect","selection","selectionStart","attributeKey","offset","startOffset","selectionEnd","endOffset","start","end","startClientId","endClientId","some","isMultiSelecting","isSelectionEnabled","initialPosition","blocksMode","insertionPoint","__unstableWithInserter","operation","template","isValid","settings","SETTINGS_DEFAULTS","preferences","PREFERENCES_DEFAULTS","prevState","blockName","match","blocksStore","getActiveBlockVariation","insert","insertUsage","time","count","blockListSettings","hasOwnProperty","editorMode","mode","hasBlockMovingClientId","lastBlockAttributesChange","automaticChangeStatus","highlightedBlock","isHighlighted","lastBlockInserted","source","meta","temporarilyEditingAsBlocks"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { reduce, omit, mapValues, isEqual, isEmpty } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\nimport { combineReducers, select } from '@wordpress/data';\nimport { store as blocksStore } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\nconst identity = ( x ) => x;\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\treturn blocks.reduce(\n\t\t( result, block ) =>\n\t\t\tObject.assign(\n\t\t\t\tresult,\n\t\t\t\t{ [ block.clientId ]: rootClientId },\n\t\t\t\tmapBlockParents( block.innerBlocks, block.clientId )\n\t\t\t),\n\t\t{}\n\t);\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array}    blocks    Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Object} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = transform( block );\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => omit( block, 'attributes' ) );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( Object.keys( a ), Object.keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tisEqual( action.clientIds, lastAction.clientIds ) &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\nfunction buildBlockTree( state, blocks ) {\n\tconst result = {};\n\tconst stack = [ ...blocks ];\n\tconst flattenedBlocks = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst block = stack.shift();\n\t\tstack.push( ...block.innerBlocks );\n\t\tflattenedBlocks.push( ...block.innerBlocks );\n\t}\n\t// Create objects before mutating them, that way it's always defined.\n\tfor ( const block of flattenedBlocks ) {\n\t\tresult[ block.clientId ] = {};\n\t}\n\tfor ( const block of flattenedBlocks ) {\n\t\tresult[ block.clientId ] = Object.assign( result[ block.clientId ], {\n\t\t\t...state.byClientId[ block.clientId ],\n\t\t\tattributes: state.attributes[ block.clientId ],\n\t\t\tinnerBlocks: block.innerBlocks.map(\n\t\t\t\t( subBlock ) => result[ subBlock.clientId ]\n\t\t\t),\n\t\t} );\n\t}\n\n\treturn result;\n}\n\nfunction updateParentInnerBlocksInTree(\n\tstate,\n\ttree,\n\tupdatedClientIds,\n\tupdateChildrenOfUpdatedClientIds = false\n) {\n\tconst uncontrolledParents = new Set( [] );\n\tconst controlledParents = new Set();\n\tfor ( const clientId of updatedClientIds ) {\n\t\tlet current = updateChildrenOfUpdatedClientIds\n\t\t\t? clientId\n\t\t\t: state.parents[ clientId ];\n\t\tdo {\n\t\t\tif ( state.controlledInnerBlocks[ current ] ) {\n\t\t\t\t// Should stop on controlled blocks.\n\t\t\t\t// If we reach a controlled parent, break out of the loop.\n\t\t\t\tcontrolledParents.add( current );\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// Else continue traversing up through parents.\n\t\t\t\tuncontrolledParents.add( current );\n\t\t\t\tcurrent = state.parents[ current ];\n\t\t\t}\n\t\t} while ( current !== undefined );\n\t}\n\n\t// To make sure the order of assignments doesn't matter,\n\t// we first create empty objects and mutates the inner blocks later.\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttree[ clientId ] = {\n\t\t\t...tree[ clientId ],\n\t\t};\n\t}\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttree[ clientId ].innerBlocks = ( state.order[ clientId ] || [] ).map(\n\t\t\t( subClientId ) => tree[ subClientId ]\n\t\t);\n\t}\n\n\t// Controlled parent blocks, need a dedicated key for their inner blocks\n\t// to be used when doing getBlocks( controlledBlockClientId ).\n\tfor ( const clientId of controlledParents ) {\n\t\ttree[ 'controlled||' + clientId ] = {\n\t\t\tinnerBlocks: ( state.order[ clientId ] || [] ).map(\n\t\t\t\t( subClientId ) => tree[ subClientId ]\n\t\t\t),\n\t\t};\n\t}\n\n\treturn tree;\n}\n\n/**\n * Higher-order reducer intended to compute full block objects key for each block in the post.\n * This is a denormalization to optimize the performance of the getBlock selectors and avoid\n * recomputing the block objects and avoid heavy memoization.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockTree =\n\t( reducer ) =>\n\t( state = {}, action ) => {\n\t\tconst newState = reducer( state, action );\n\n\t\tif ( newState === state ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tnewState.tree = state.tree ? state.tree : {};\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst subTree = buildBlockTree( newState, action.blocks );\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t{\n\t\t\t\t\t\t...newState.tree,\n\t\t\t\t\t\t...subTree,\n\t\t\t\t\t},\n\t\t\t\t\taction.rootClientId ? [ action.rootClientId ] : [ '' ],\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t{\n\t\t\t\t\t\t...newState.tree,\n\t\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t\t...newState.tree[ action.clientId ],\n\t\t\t\t\t\t\t...newState.byClientId[ action.clientId ],\n\t\t\t\t\t\t\tattributes: newState.attributes[ action.clientId ],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t[ action.clientId ],\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\tconst newSubTree = action.clientIds.reduce(\n\t\t\t\t\t( result, clientId ) => {\n\t\t\t\t\t\tresult[ clientId ] = {\n\t\t\t\t\t\t\t...newState.tree[ clientId ],\n\t\t\t\t\t\t\tattributes: newState.attributes[ clientId ],\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t},\n\t\t\t\t\t{}\n\t\t\t\t);\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t{\n\t\t\t\t\t\t...newState.tree,\n\t\t\t\t\t\t...newSubTree,\n\t\t\t\t\t},\n\t\t\t\t\taction.clientIds,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst subTree = buildBlockTree( newState, action.blocks );\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t{\n\t\t\t\t\t\t...omit(\n\t\t\t\t\t\t\tnewState.tree,\n\t\t\t\t\t\t\taction.replacedClientIds.concat(\n\t\t\t\t\t\t\t\t// Controlled inner blocks are only removed\n\t\t\t\t\t\t\t\t// if the block doesn't move to another position\n\t\t\t\t\t\t\t\t// otherwise their content will be lost.\n\t\t\t\t\t\t\t\taction.replacedClientIds\n\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t( clientId ) => ! subTree[ clientId ]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t\t\t\t( clientId ) =>\n\t\t\t\t\t\t\t\t\t\t\t'controlled||' + clientId\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t...subTree,\n\t\t\t\t\t},\n\t\t\t\t\taction.blocks.map( ( b ) => b.clientId ),\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\t// If there are no replaced blocks, it means we're removing blocks so we need to update their parent.\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents[ clientId ] !== undefined &&\n\t\t\t\t\t\t( state.parents[ clientId ] === '' ||\n\t\t\t\t\t\t\tnewState.byClientId[ state.parents[ clientId ] ] )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents[ clientId ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tnewState.tree,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents[ clientId ] !== undefined &&\n\t\t\t\t\t\t( state.parents[ clientId ] === '' ||\n\t\t\t\t\t\t\tnewState.byClientId[ state.parents[ clientId ] ] )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents[ clientId ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tomit(\n\t\t\t\t\t\tnewState.tree,\n\t\t\t\t\t\taction.removedClientIds.concat(\n\t\t\t\t\t\t\taction.removedClientIds.map(\n\t\t\t\t\t\t\t\t( clientId ) => 'controlled||' + clientId\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t\t} else {\n\t\t\t\t\tupdatedBlockUids.push( '' );\n\t\t\t\t}\n\t\t\t\tif ( action.toRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t\t}\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tnewState.tree,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_UP':\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst updatedBlockUids = [\n\t\t\t\t\taction.rootClientId ? action.rootClientId : '',\n\t\t\t\t];\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tnewState.tree,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst updatedBlockUids = Object.entries( newState.attributes )\n\t\t\t\t\t.filter( ( [ clientId, attributes ] ) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tnewState.byClientId[ clientId ].name ===\n\t\t\t\t\t\t\t\t'core/block' &&\n\t\t\t\t\t\t\tattributes.ref === action.updatedId\n\t\t\t\t\t\t);\n\t\t\t\t\t} )\n\t\t\t\t\t.map( ( [ clientId ] ) => clientId );\n\n\t\t\t\tnewState.tree = updateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t{\n\t\t\t\t\t\t...newState.tree,\n\t\t\t\t\t\t...updatedBlockUids.reduce( ( result, clientId ) => {\n\t\t\t\t\t\t\tresult[ clientId ] = {\n\t\t\t\t\t\t\t\t...newState.byClientId[ clientId ],\n\t\t\t\t\t\t\t\tattributes: newState.attributes[ clientId ],\n\t\t\t\t\t\t\t\tinnerBlocks:\n\t\t\t\t\t\t\t\t\tnewState.tree[ clientId ].innerBlocks,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}, {} ),\n\t\t\t\t\t},\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn newState;\n\t};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tconst nextIsPersistentChange = state?.isPersistentChange ?? true;\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\t// Gets all children which need to be removed.\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif (\n\t\t\t\t! state.order[ result[ i ] ] ||\n\t\t\t\t( action.keepControlledInnerBlocks &&\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order[ result[ i ] ] );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'RESET_BLOCKS' ) {\n\t\tconst newState = {\n\t\t\t...state,\n\t\t\tbyClientId: getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\tattributes: getFlattenedBlockAttributes( action.blocks ),\n\t\t\torder: mapBlockOrder( action.blocks ),\n\t\t\tparents: mapBlockParents( action.blocks ),\n\t\t\tcontrolledInnerBlocks: {},\n\t\t};\n\n\t\tconst subTree = buildBlockTree( newState, action.blocks );\n\t\tnewState.tree = {\n\t\t\t...subTree,\n\t\t\t// Root.\n\t\t\t'': {\n\t\t\t\tinnerBlocks: action.blocks.map(\n\t\t\t\t\t( subBlock ) => subTree[ subBlock.clientId ]\n\t\t\t\t),\n\t\t\t},\n\t\t};\n\n\t\treturn newState;\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\n * containing all the child's of the root block followed by the execution of\n * `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\n\t// Finds every nested inner block controller. We must check the action blocks\n\t// and not just the block parent state because some inner block controllers\n\t// should be deleted if specified, whereas others should not be deleted. If\n\t// a controlled should not be deleted, then we need to avoid deleting its\n\t// inner blocks from the block state because its inner blocks will not be\n\t// attached to the block in the action.\n\tconst nestedControllers = {};\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\n\t\tconst stack = [ ...action.blocks ];\n\t\twhile ( stack.length ) {\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\tstack.push( ...innerBlocks );\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\n\t\t\t\tnestedControllers[ block.clientId ] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\n\t// marked block in the block state so that they can be reattached to the\n\t// marked block when we re-insert everything a few lines below.\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order[ action.rootClientId ] ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\n\t\t\tclientIds: state.order[ action.rootClientId ],\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\n\t\t// We need to re-attach the controlled inner blocks to the blocks tree and\n\t\t// preserve their block order. Otherwise, an inner block controller's blocks\n\t\t// will be deleted entirely from its entity.\n\t\tstateAfterInsert.order = {\n\t\t\t...stateAfterInsert.order,\n\t\t\t...reduce(\n\t\t\t\tnestedControllers,\n\t\t\t\t( result, value, key ) => {\n\t\t\t\t\tif ( state.order[ key ] ) {\n\t\t\t\t\t\tresult[ key ] = state.order[ key ];\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t),\n\t\t};\n\t\tstateAfterInsert.tree = {\n\t\t\t...stateAfterInsert.tree,\n\t\t\t...reduce(\n\t\t\t\tnestedControllers,\n\t\t\t\t( result, value, _key ) => {\n\t\t\t\t\tconst key = `controlled||${ _key }`;\n\t\t\t\t\tif ( state.tree[ key ] ) {\n\t\t\t\t\t\tresult[ key ] = state.tree[ key ];\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t),\n\t\t};\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one.\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\n\t\tstate.attributes = mapValues(\n\t\t\tstate.attributes,\n\t\t\t( attributes, clientId ) => {\n\t\t\t\tconst { name } = state.byClientId[ clientId ];\n\t\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...attributes,\n\t\t\t\t\t\tref: updatedId,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn attributes;\n\t\t\t}\n\t\t);\n\t}\n\n\treturn reducer( state, action );\n};\n/**\n * Higher-order reducer which removes blocks from state when switching parent block controlled state.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withResetControlledBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t// when switching a block from controlled to uncontrolled or inverse,\n\t\t// we need to remove its content first.\n\t\tconst tempState = reducer( state, {\n\t\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\t\trootClientId: action.clientId,\n\t\t\tblocks: [],\n\t\t} );\n\t\treturn reducer( tempState, action );\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = pipe(\n\tcombineReducers,\n\twithSaveReusableBlock, // Needs to be before withBlockCache.\n\twithBlockTree, // Needs to be before withInnerBlocksRemoveCascade.\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // Needs to be after withInnerBlocksRemoveCascade.\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange,\n\twithResetControlledBlocks\n)( {\n\tbyClientId( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known.\n\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst changes = omit( action.updates, 'attributes' );\n\t\t\t\tif ( isEmpty( changes ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...changes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlocksWithoutAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tattributes( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state[ action.clientId ] ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state[ id ] ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst next = action.clientIds.reduce(\n\t\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t\t...accumulator,\n\t\t\t\t\t\t[ id ]: reduce(\n\t\t\t\t\t\t\taction.uniqueByBlock\n\t\t\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t\t\t: action.attributes,\n\t\t\t\t\t\t\t( result, value, key ) => {\n\t\t\t\t\t\t\t\t// Consider as updates only changed values.\n\t\t\t\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\t\t\t\tresult = getMutateSafeObject(\n\t\t\t\t\t\t\t\t\t\tstate[ id ],\n\t\t\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstate[ id ]\n\t\t\t\t\t\t),\n\t\t\t\t\t} ),\n\t\t\t\t\t{}\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\taction.clientIds.every(\n\t\t\t\t\t\t( id ) => next[ id ] === state[ id ]\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn { ...state, ...next };\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...getFlattenedBlockAttributes( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\torder( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst blockOrder = mapBlockOrder( action.blocks );\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...omit( blockOrder, '' ),\n\t\t\t\t\t'': ( state?.[ '' ] || [] ).concat( blockOrder[ '' ] ),\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t[ rootClientId ]: insertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks[ rootClientId ],\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientIds,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t// Moving inside the same parent block.\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ toRootClientId ]: moveTo(\n\t\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another.\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ fromRootClientId ]:\n\t\t\t\t\t\tstate[ fromRootClientId ]?.filter(\n\t\t\t\t\t\t\t( id ) => ! clientIds.includes( id )\n\t\t\t\t\t\t) ?? [],\n\t\t\t\t\t[ toRootClientId ]: insertAt(\n\t\t\t\t\t\tstate[ toRootClientId ],\n\t\t\t\t\t\tclientIds,\n\t\t\t\t\t\tindex\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif ( ! subState.length || firstClientId === subState[ 0 ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst lastClientId = clientIds[ clientIds.length - 1 ];\n\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tlastClientId === subState[ subState.length - 1 ]\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ rootClientId ]: moveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\n\t\t\t\treturn pipe( [\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tomit( nextState, action.replacedClientIds ),\n\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t} ),\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues( nextState, ( subState ) =>\n\t\t\t\t\t\t\treduce(\n\t\t\t\t\t\t\t\tsubState,\n\t\t\t\t\t\t\t\t( result, clientId ) => {\n\t\t\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tclientIds.indexOf( clientId ) === -1\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn pipe( [\n\t\t\t\t\t// Remove inner block ordering for removed blocks.\n\t\t\t\t\t( nextState ) => omit( nextState, action.removedClientIds ),\n\n\t\t\t\t\t// Remove deleted blocks from other blocks' orderings.\n\t\t\t\t\t( nextState ) =>\n\t\t\t\t\t\tmapValues(\n\t\t\t\t\t\t\tnextState,\n\t\t\t\t\t\t\t( subState ) =>\n\t\t\t\t\t\t\t\tsubState?.filter(\n\t\t\t\t\t\t\t\t\t( id ) =>\n\t\t\t\t\t\t\t\t\t\t! action.removedClientIds.includes( id )\n\t\t\t\t\t\t\t\t) ?? []\n\t\t\t\t\t\t),\n\t\t\t\t] )( state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents( action.blocks ),\n\t\t\t\t};\n\n\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.clientIds.reduce( ( accumulator, id ) => {\n\t\t\t\t\t\taccumulator[ id ] = action.toRootClientId || '';\n\t\t\t\t\t\treturn accumulator;\n\t\t\t\t\t}, {} ),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, action.replacedClientIds ),\n\t\t\t\t\t...mapBlockParents(\n\t\t\t\t\t\taction.blocks,\n\t\t\t\t\t\tstate[ action.clientIds[ 0 ] ]\n\t\t\t\t\t),\n\t\t\t\t};\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\treturn omit( state, action.removedClientIds );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tcontrolledInnerBlocks(\n\t\tstate = {},\n\t\t{ type, clientId, hasControlledInnerBlocks }\n\t) {\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\n\t\t\t};\n\t\t}\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragged block client id.\n *\n * @param {string[]} state  Current state.\n * @param {Object}   action Dispatched action.\n *\n * @return {string[]} Updated state.\n */\nexport function draggedBlocks( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn action.clientIds;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn [];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking the visible blocks.\n *\n * @param {Record<string,boolean>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string,boolean>} Block visibility.\n */\nexport function blockVisibility( state = {}, action ) {\n\tif ( action.type === 'SET_BLOCK_VISIBILITY' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t...action.updates,\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selectionHelper( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst blockToSelect =\n\t\t\t\taction.blocks[ action.indexToSelect ] ||\n\t\t\t\taction.blocks[ action.blocks.length - 1 ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: blockToSelect.clientId };\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the selection state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\tif ( action.clientId ) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.startOffset,\n\t\t\t\t\t},\n\t\t\t\t\tselectionEnd: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.endOffset,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: action.start || state.selectionStart,\n\t\t\t\tselectionEnd: action.end || state.selectionEnd,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\tconst { selectionStart, selectionEnd } = action;\n\t\t\treturn {\n\t\t\t\tselectionStart,\n\t\t\t\tselectionEnd,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\tconst { start, end } = action;\n\n\t\t\tif (\n\t\t\t\tstart === state.selectionStart?.clientId &&\n\t\t\t\tend === state.selectionEnd?.clientId\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: { clientId: start },\n\t\t\t\tselectionEnd: { clientId: end },\n\t\t\t};\n\t\tcase 'RESET_BLOCKS':\n\t\t\tconst startClientId = state?.selectionStart?.clientId;\n\t\t\tconst endClientId = state?.selectionEnd?.clientId;\n\n\t\t\t// Do nothing if there's no selected block.\n\t\t\tif ( ! startClientId && ! endClientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If the start of the selection won't exist after reset, remove selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === startClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {},\n\t\t\t\t\tselectionEnd: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If the end of the selection won't exist after reset, collapse selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === endClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tselectionEnd: state.selectionStart,\n\t\t\t\t};\n\t\t\t}\n\t}\n\n\treturn {\n\t\tselectionStart: selectionHelper( state.selectionStart, action ),\n\t\tselectionEnd: selectionHelper( state.selectionEnd, action ),\n\t};\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the initial block selection.\n *\n * Currently this in only used to restore the selection after block deletion and\n * pasting new content.This reducer should eventually be removed in favour of setting\n * selection directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {number|null} Initial position: 0, -1 or null.\n */\nexport function initialPosition( state = null, action ) {\n\tif (\n\t\taction.type === 'REPLACE_BLOCKS' &&\n\t\taction.initialPosition !== undefined\n\t) {\n\t\treturn action.initialPosition;\n\t} else if (\n\t\t[\n\t\t\t'MULTI_SELECT',\n\t\t\t'SELECT_BLOCK',\n\t\t\t'RESET_SELECTION',\n\t\t\t'INSERT_BLOCKS',\n\t\t\t'REPLACE_INNER_BLOCKS',\n\t\t].includes( action.type )\n\t) {\n\t\treturn action.initialPosition;\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT': {\n\t\t\tconst { rootClientId, index, __unstableWithInserter, operation } =\n\t\t\t\taction;\n\t\t\tconst nextState = {\n\t\t\t\trootClientId,\n\t\t\t\tindex,\n\t\t\t\t__unstableWithInserter,\n\t\t\t\toperation,\n\t\t\t};\n\n\t\t\t// Bail out updates if the states are the same.\n\t\t\treturn isEqual( state, nextState ) ? state : nextState;\n\t\t}\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tconst { attributes, name: blockName } = block;\n\t\t\t\tconst match = select( blocksStore ).getActiveBlockVariation(\n\t\t\t\t\tblockName,\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\t// If a block variation match is found change the name to be the same with the\n\t\t\t\t// one that is used for block variations in the Inserter (`getItemFromVariation`).\n\t\t\t\tlet id = match?.name\n\t\t\t\t\t? `${ blockName }/${ match.name }`\n\t\t\t\t\t: blockName;\n\t\t\t\tconst insert = { name: id };\n\t\t\t\tif ( blockName === 'core/block' ) {\n\t\t\t\t\tinsert.ref = attributes.ref;\n\t\t\t\t\tid += '/' + attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning which mode is enabled.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function editorMode( state = 'edit', action ) {\n\t// Let inserting block in navigation mode always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' && state === 'navigation' ) {\n\t\treturn 'edit';\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn action.mode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the block moving mode is enabled or not.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function hasBlockMovingClientId( state = null, action ) {\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\n\t\treturn action.hasBlockMovingClientId;\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn action.clientIds.reduce(\n\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[ id ]: action.uniqueByBlock\n\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t: action.attributes,\n\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning automatic change state.\n *\n * @param {?string} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function automaticChangeStatus( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'MARK_AUTOMATIC_CHANGE':\n\t\t\treturn 'pending';\n\t\tcase 'MARK_AUTOMATIC_CHANGE_FINAL':\n\t\t\tif ( state === 'pending' ) {\n\t\t\t\treturn 'final';\n\t\t\t}\n\n\t\t\treturn;\n\t\tcase 'SELECTION_CHANGE':\n\t\t\t// As long as the state is not final, ignore any selection changes.\n\t\t\tif ( state !== 'final' ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn;\n\t\t// Undoing an automatic change should still be possible after mouse\n\t\t// move or after visibility change.\n\t\tcase 'SET_BLOCK_VISIBILITY':\n\t\tcase 'START_TYPING':\n\t\tcase 'STOP_TYPING':\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS':\n\t\t\treturn state;\n\t}\n\n\t// TODO: This is a source of bug, as each time there's a change in timing,\n\t// or a new action is added, this could break.\n\t// Reset the state by default (for any action not handled).\n}\n\n/**\n * Reducer returning current highlighted block.\n *\n * @param {boolean} state  Current highlighted block.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function highlightedBlock( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\n\t\t\tconst { clientId, isHighlighted } = action;\n\n\t\t\tif ( isHighlighted ) {\n\t\t\t\treturn clientId;\n\t\t\t} else if ( state === clientId ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn state;\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId !== state ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion event list state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function lastBlockInserted( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\t\tif ( ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst clientId = action.blocks[ 0 ].clientId;\n\t\t\tconst source = action.meta?.source;\n\n\t\t\treturn { clientId, source };\n\t\tcase 'RESET_BLOCKS':\n\t\t\treturn {};\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the block that is eding temporarily edited as blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function temporarilyEditingAsBlocks( state = '', action ) {\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\n\t\treturn action.temporarilyEditingAsBlocks;\n\t}\n\treturn state;\n}\n\nexport default combineReducers( {\n\tblocks,\n\tisTyping,\n\tdraggedBlocks,\n\tselection,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\teditorMode,\n\thasBlockMovingClientId,\n\tautomaticChangeStatus,\n\thighlightedBlock,\n\tlastBlockInserted,\n\ttemporarilyEditingAsBlocks,\n\tblockVisibility,\n} );\n"]}